// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestWork2021.Core;

namespace TestWork2021.Migrations
{
    [DbContext(typeof(AppDBContext))]
    partial class AppDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TestWork2021.Core.Product", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("naim")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sku")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            id = 1,
                            naim = "Набор цветных карандашей MARCO Superb Writer 4100-12CB, 12 цветов",
                            sku = "150853",
                            url = "https://images.ua.prom.st/1647524865_w272_h200_nabor-tsvetnyh-karandashej.jpg"
                        },
                        new
                        {
                            id = 2,
                            naim = "Тетрадь 12 листов линия, Фоновая &#34;Квітка&#34;",
                            sku = "150005",
                            url = "https://images.ua.prom.st/1017594182_w272_h200_tetrad-12-listov.jpg"
                        },
                        new
                        {
                            id = 3,
                            naim = "Картина по номерам &#34;Забавные питомцы&#34; на полотне, большая 400*500мм №30340",
                            sku = "А108831",
                            url = "https://images.ua.prom.st/2731377405_w272_h200_kartina-po-nomeram.jpg"
                        },
                        new
                        {
                            id = 4,
                            naim = "Ручка масляная Cello Writo-meter &#34;10км&#34; синяя",
                            sku = "150653",
                            url = "https://images.ua.prom.st/1002943071_w272_h200_ruchka-maslyanaya-cello.jpg"
                        },
                        new
                        {
                            id = 5,
                            naim = "Тетрадь 12 листов линия, Фоновая &#34;Мрiя&#34;",
                            sku = "150012",
                            url = "https://images.ua.prom.st/996295732_w272_h200_tetrad-12-listov.jpg"
                        },
                        new
                        {
                            id = 6,
                            naim = "Тетрадь 18 листов линия, Фоновая &#34;Мрiя&#34;",
                            sku = "150016",
                            url = "https://images.ua.prom.st/996382631_w272_h200_tetrad-18-listov.jpg"
                        },
                        new
                        {
                            id = 7,
                            naim = "Пластилин 8 цветов &#34;Луч&#34; &#34;Классика&#34;, 160 грамм",
                            sku = "150224",
                            url = "https://images.ua.prom.st/1102242891_w272_h200_plastilin-8-tsvetov.jpg"
                        },
                        new
                        {
                            id = 8,
                            naim = "Сумка для обуви &#34;Мультики 808&#34;, 35х25см",
                            sku = "110574",
                            url = "https://images.ua.prom.st/1720812071_w272_h200_sumka-dlya-obuvi.jpg"
                        },
                        new
                        {
                            id = 9,
                            naim = "Ручка &#34;пиши-стирай&#34; &#34;С&#34; синяя (CR-707F)",
                            sku = "191500",
                            url = "https://images.ua.prom.st/1350538336_w272_h200_ruchka-pishi-stiraj-s.jpg"
                        },
                        new
                        {
                            id = 10,
                            naim = "Рюкзак школьный &#34;Ниндзяго Битва&#34;, ортопедический, коробка 33х26х13см. (Ninjago)",
                            sku = "988556",
                            url = "https://images.ua.prom.st/2446121850_w272_h200_ryukzak-shkolnyj-nindzyago.jpg"
                        },
                        new
                        {
                            id = 11,
                            naim = "Альбом для рисования A4 на скобе, 20 листов, плотность 120г/м²",
                            sku = "194221",
                            url = "https://images.ua.prom.st/1075415876_w272_h200_albom-dlya-risovaniya.jpg"
                        },
                        new
                        {
                            id = 12,
                            naim = "Краски акварельные &#34;Луч - Классика&#34; 12 цветов",
                            sku = "150184",
                            url = "https://images.ua.prom.st/1365922583_w272_h200_kraski-akvarelnye-luch.jpg"
                        },
                        new
                        {
                            id = 13,
                            naim = "Краски акварельные &#34;Луч&#34; 32 цвета",
                            sku = "193577",
                            url = "https://images.ua.prom.st/1088077436_w272_h200_kraski-akvarelnye-luch.jpg"
                        },
                        new
                        {
                            id = 14,
                            naim = "Раскраска &#34;Антистресс&#34; &#34;Вокруг света&#34; 24 рисунка, формат В4, GDM-008",
                            sku = "195895",
                            url = "https://images.ua.prom.st/1494798100_w272_h200_raskraska-antistress-vokrug.jpg"
                        },
                        new
                        {
                            id = 15,
                            naim = "Гуашь &#34;Луч Классика&#34; 12 цветов по 20 мл. блок-тара",
                            sku = "193576",
                            url = "https://images.ua.prom.st/1634666786_w272_h200_guash-luch-klassika.jpg"
                        },
                        new
                        {
                            id = 16,
                            naim = "Гуашь &#34;Гамма&#34; 12 цветов по 10 мл.",
                            sku = "193761",
                            url = "https://images.ua.prom.st/1243159090_w272_h200_guash-gamma-12.jpg"
                        },
                        new
                        {
                            id = 17,
                            naim = "Альбом для рисования A4 на спирали, 30 листов, плотность 120г/м²",
                            sku = "151058",
                            url = "https://images.ua.prom.st/1333050618_w272_h200_albom-dlya-risovaniya.jpg"
                        },
                        new
                        {
                            id = 18,
                            naim = "Пластилин 12 цветов &#34;Гамма&#34;, 240 грамм",
                            sku = "193767",
                            url = "https://images.ua.prom.st/1102067072_w272_h200_plastilin-12-tsvetov.jpg"
                        },
                        new
                        {
                            id = 19,
                            naim = "Пластилин 10 цветов &#34;Гамма&#34;, 200 грамм",
                            sku = "193766",
                            url = "https://images.ua.prom.st/2223391181_w272_h200_plastilin-10-tsvetov.jpg"
                        },
                        new
                        {
                            id = 20,
                            naim = "Фломастеры MARCO 1630-48CB 48 цветов",
                            sku = "196145",
                            url = "https://images.ua.prom.st/2063124737_w272_h200_flomastery-marco-1630-48cb.jpg"
                        },
                        new
                        {
                            id = 21,
                            naim = "Раскраска по номерам &#34;Лев 3&#34; на полотне, большая 400*500мм №30654",
                            sku = "А108924",
                            url = "https://images.ua.prom.st/2734243721_w272_h200_raskraska-po-nomeram.jpg"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
